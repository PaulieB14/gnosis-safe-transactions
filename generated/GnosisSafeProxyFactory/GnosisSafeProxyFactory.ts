// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProxyCreation extends ethereum.Event {
  get params(): ProxyCreation__Params {
    return new ProxyCreation__Params(this);
  }
}

export class ProxyCreation__Params {
  _event: ProxyCreation;

  constructor(event: ProxyCreation) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get singleton(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GnosisSafeProxyFactory extends ethereum.SmartContract {
  static bind(address: Address): GnosisSafeProxyFactory {
    return new GnosisSafeProxyFactory("GnosisSafeProxyFactory", address);
  }

  calculateCreateProxyWithNonceAddress(
    _singleton: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): Address {
    let result = super.call(
      "calculateCreateProxyWithNonceAddress",
      "calculateCreateProxyWithNonceAddress(address,bytes,uint256):(address)",
      [
        ethereum.Value.fromAddress(_singleton),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce)
      ]
    );

    return result[0].toAddress();
  }

  try_calculateCreateProxyWithNonceAddress(
    _singleton: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "calculateCreateProxyWithNonceAddress",
      "calculateCreateProxyWithNonceAddress(address,bytes,uint256):(address)",
      [
        ethereum.Value.fromAddress(_singleton),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createProxy(singleton: Address, data: Bytes): Address {
    let result = super.call(
      "createProxy",
      "createProxy(address,bytes):(address)",
      [ethereum.Value.fromAddress(singleton), ethereum.Value.fromBytes(data)]
    );

    return result[0].toAddress();
  }

  try_createProxy(
    singleton: Address,
    data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createProxy",
      "createProxy(address,bytes):(address)",
      [ethereum.Value.fromAddress(singleton), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createProxyWithCallback(
    _singleton: Address,
    initializer: Bytes,
    saltNonce: BigInt,
    callback: Address
  ): Address {
    let result = super.call(
      "createProxyWithCallback",
      "createProxyWithCallback(address,bytes,uint256,address):(address)",
      [
        ethereum.Value.fromAddress(_singleton),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce),
        ethereum.Value.fromAddress(callback)
      ]
    );

    return result[0].toAddress();
  }

  try_createProxyWithCallback(
    _singleton: Address,
    initializer: Bytes,
    saltNonce: BigInt,
    callback: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createProxyWithCallback",
      "createProxyWithCallback(address,bytes,uint256,address):(address)",
      [
        ethereum.Value.fromAddress(_singleton),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce),
        ethereum.Value.fromAddress(callback)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createProxyWithNonce(
    _singleton: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): Address {
    let result = super.call(
      "createProxyWithNonce",
      "createProxyWithNonce(address,bytes,uint256):(address)",
      [
        ethereum.Value.fromAddress(_singleton),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce)
      ]
    );

    return result[0].toAddress();
  }

  try_createProxyWithNonce(
    _singleton: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createProxyWithNonce",
      "createProxyWithNonce(address,bytes,uint256):(address)",
      [
        ethereum.Value.fromAddress(_singleton),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyCreationCode(): Bytes {
    let result = super.call(
      "proxyCreationCode",
      "proxyCreationCode():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_proxyCreationCode(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxyCreationCode",
      "proxyCreationCode():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proxyRuntimeCode(): Bytes {
    let result = super.call(
      "proxyRuntimeCode",
      "proxyRuntimeCode():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_proxyRuntimeCode(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxyRuntimeCode",
      "proxyRuntimeCode():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class CalculateCreateProxyWithNonceAddressCall extends ethereum.Call {
  get inputs(): CalculateCreateProxyWithNonceAddressCall__Inputs {
    return new CalculateCreateProxyWithNonceAddressCall__Inputs(this);
  }

  get outputs(): CalculateCreateProxyWithNonceAddressCall__Outputs {
    return new CalculateCreateProxyWithNonceAddressCall__Outputs(this);
  }
}

export class CalculateCreateProxyWithNonceAddressCall__Inputs {
  _call: CalculateCreateProxyWithNonceAddressCall;

  constructor(call: CalculateCreateProxyWithNonceAddressCall) {
    this._call = call;
  }

  get _singleton(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get saltNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CalculateCreateProxyWithNonceAddressCall__Outputs {
  _call: CalculateCreateProxyWithNonceAddressCall;

  constructor(call: CalculateCreateProxyWithNonceAddressCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateProxyCall extends ethereum.Call {
  get inputs(): CreateProxyCall__Inputs {
    return new CreateProxyCall__Inputs(this);
  }

  get outputs(): CreateProxyCall__Outputs {
    return new CreateProxyCall__Outputs(this);
  }
}

export class CreateProxyCall__Inputs {
  _call: CreateProxyCall;

  constructor(call: CreateProxyCall) {
    this._call = call;
  }

  get singleton(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateProxyCall__Outputs {
  _call: CreateProxyCall;

  constructor(call: CreateProxyCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateProxyWithCallbackCall extends ethereum.Call {
  get inputs(): CreateProxyWithCallbackCall__Inputs {
    return new CreateProxyWithCallbackCall__Inputs(this);
  }

  get outputs(): CreateProxyWithCallbackCall__Outputs {
    return new CreateProxyWithCallbackCall__Outputs(this);
  }
}

export class CreateProxyWithCallbackCall__Inputs {
  _call: CreateProxyWithCallbackCall;

  constructor(call: CreateProxyWithCallbackCall) {
    this._call = call;
  }

  get _singleton(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get saltNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get callback(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateProxyWithCallbackCall__Outputs {
  _call: CreateProxyWithCallbackCall;

  constructor(call: CreateProxyWithCallbackCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateProxyWithNonceCall extends ethereum.Call {
  get inputs(): CreateProxyWithNonceCall__Inputs {
    return new CreateProxyWithNonceCall__Inputs(this);
  }

  get outputs(): CreateProxyWithNonceCall__Outputs {
    return new CreateProxyWithNonceCall__Outputs(this);
  }
}

export class CreateProxyWithNonceCall__Inputs {
  _call: CreateProxyWithNonceCall;

  constructor(call: CreateProxyWithNonceCall) {
    this._call = call;
  }

  get _singleton(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get saltNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateProxyWithNonceCall__Outputs {
  _call: CreateProxyWithNonceCall;

  constructor(call: CreateProxyWithNonceCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
