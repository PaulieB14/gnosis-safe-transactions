schema {
  query: Query
}

type Query {
  addedOwners: [AddedOwner!]! @derivedFrom(field: "owner")
  removedOwners: [RemovedOwner!]! @derivedFrom(field: "owner")
  changedThresholds: [ChangedThreshold!]! @derivedFrom(field: "safe")
  executionSuccesses: [ExecutionSuccess!]! @derivedFrom(field: "safe")
  executionFailures: [ExecutionFailure!]! @derivedFrom(field: "safe")
  proxyCreations: [ProxyCreation!]! @derivedFrom(field: "proxy")
}

type AddedOwner @entity {
  id: ID!
  safe: Bytes! # Address of the Gnosis Safe
  owner: Bytes! # Address of the owner added
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemovedOwner @entity {
  id: ID!
  safe: Bytes! # Address of the Gnosis Safe
  owner: Bytes! # Address of the owner removed
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedThreshold @entity {
  id: ID!
  safe: Bytes! # Address of the Gnosis Safe
  threshold: BigInt! # New required number of confirmations
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionSuccess @entity {
  id: ID!
  safe: Bytes! # Address of the Gnosis Safe
  txHash: Bytes! # Transaction hash of the executed transaction
  payment: BigInt! # Ether value of the transaction
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionFailure @entity {
  id: ID!
  safe: Bytes! # Address of the Gnosis Safe
  txHash: Bytes! # Transaction hash of the failed transaction
  payment: BigInt! # Ether value of the transaction
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProxyCreation @entity {
  id: ID!
  proxy: Bytes! # Address of the newly created proxy
  singleton: Bytes! # Address of the singleton
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
